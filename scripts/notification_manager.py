"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import argparse
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from DB.notification_service import NotificationService
from DB.Models import async_session, User, UserNotification
from sqlalchemy import select, func


async def show_notification_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("=" * 50)
    
    stats = await NotificationService.get_notification_stats()
    
    print(f"üì® –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['total_notifications']}")
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent_notifications']}")
    print(f"üëÄ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {stats['read_notifications']}")
    print(f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {stats['pending_notifications']}")
    print(f"üÜï –ù–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {stats['new_apartments']}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with async_session() as session:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_query = select(func.count(User.id)).where(User.is_active == True)
        users_result = await session.execute(users_query)
        active_users = users_result.scalar() or 0
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        recent_notifications_query = select(UserNotification).order_by(
            UserNotification.created_at.desc()
        ).limit(3)
        recent_result = await session.execute(recent_notifications_query)
        recent_notifications = recent_result.scalars().all()
        
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}")
        
        if recent_notifications:
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            for notif in recent_notifications:
                status = "‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if notif.is_sent else "‚è≥ –≤ –æ—á–µ—Ä–µ–¥–∏"
                read_status = " (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ)" if notif.is_read else ""
                print(f"   ‚Ä¢ {notif.created_at.strftime('%d.%m %H:%M')} - {notif.apartment_count} –∫–≤–∞—Ä—Ç–∏—Ä - {status}{read_status}")


async def test_notifications(test_user_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    created = await NotificationService.create_notifications_for_new_apartments(3)
    
    if created > 0:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


async def cleanup_notifications(days: int = 30):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    deleted = await NotificationService.cleanup_old_notifications(days)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


async def show_user_notifications(telegram_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üë§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}:")
    print("=" * 50)
    
    async with async_session() as session:
        query = select(UserNotification).where(
            UserNotification.telegram_id == telegram_id
        ).order_by(UserNotification.created_at.desc())
        
        result = await session.execute(query)
        notifications = result.scalars().all()
        
        if not notifications:
            print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for i, notif in enumerate(notifications, 1):
            status_emoji = "‚úÖ" if notif.is_sent else "‚è≥"
            read_emoji = "üëÅÔ∏è" if notif.is_read else "üì¨"
            
            print(f"{i}. {status_emoji} {read_emoji} {notif.created_at.strftime('%d.%m.%Y %H:%M')}")
            print(f"   {notif.apartment_count} –∫–≤–∞—Ä—Ç–∏—Ä")
            if notif.sent_at:
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notif.sent_at.strftime('%d.%m.%Y %H:%M')}")
            if notif.read_at:
                print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {notif.read_at.strftime('%d.%m.%Y %H:%M')}")
            print()


async def show_new_apartments_for_user(telegram_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üÜï –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}:")
    print("=" * 50)
    
    apartments = await NotificationService.get_new_apartments_for_user(telegram_id, limit=10)
    
    if not apartments:
        print("‚ùå –ù–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    for i, apt in enumerate(apartments, 1):
        price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        print(f"{i}. {price_str}")
        print(f"   {apt.title}")
        print(f"   ID: {apt.cian_id}")
        print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: {apt.approved_at.strftime('%d.%m.%Y %H:%M') if apt.approved_at else 'N/A'}")
        print()


async def mark_user_notifications_read(telegram_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
    print(f"üìñ –û—Ç–º–µ—á–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}...")
    
    marked = await NotificationService.mark_notifications_read(telegram_id)
    print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ {marked} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")


def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    test_parser.add_argument('user_id', type=int, help='ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    cleanup_parser.add_argument('--days', type=int, default=30, help='–í–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_parser = subparsers.add_parser('user', help='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_parser = subparsers.add_parser('new', help='–ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    new_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    read_parser = subparsers.add_parser('mark-read', help='–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ')
    read_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    args = parser.parse_args()
    
    if args.command == 'stats':
        asyncio.run(show_notification_stats())
        
    elif args.command == 'test':
        asyncio.run(test_notifications(args.user_id))
        
    elif args.command == 'cleanup':
        asyncio.run(cleanup_notifications(args.days))
        
    elif args.command == 'user':
        asyncio.run(show_user_notifications(args.telegram_id))
        
    elif args.command == 'new':
        asyncio.run(show_new_apartments_for_user(args.telegram_id))
        
    elif args.command == 'mark-read':
        asyncio.run(mark_user_notifications_read(args.telegram_id))
        
    else:
        parser.print_help()


if __name__ == "__main__":
    main()