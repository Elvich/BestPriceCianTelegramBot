"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω—É –ë–î –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ApartmentService.
"""

import asyncio
import sys
import argparse
from datetime import datetime
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from DB.filter_service import FilterService, FilterConfig, DEFAULT_FILTER_CONFIG, PREMIUM_FILTER_CONFIG, BARGAIN_HUNTER_CONFIG, BOOTSTRAP_CONFIG
from DB.apartment_service import ApartmentService

async def run_filter(config: FilterConfig, limit: int = 50, verbose: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    if verbose:
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–≤–∞—Ä—Ç–∏—Ä...")
        print(f"   –õ–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {limit}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        staging_stats = await ApartmentService.get_statistics(staging_only=True)
        production_stats = await ApartmentService.get_statistics(staging_only=False)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   Staging: {staging_stats['total_apartments']} (pending: {staging_stats['pending_apartments']})")
        print(f"   Production: {production_stats['total_apartments']} (active: {production_stats['active_apartments']})")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_service = FilterService(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    start_time = datetime.now()
    results = await filter_service.process_apartments(limit)
    end_time = datetime.now()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
    print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: {results['approved']}")
    print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {results['rejected']}")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end_time - start_time).total_seconds():.1f}—Å")
    
    if verbose and results['processed'] > 0:
        approval_rate = (results['approved'] / results['processed']) * 100
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_rate:.1f}%")

async def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–µ–∏–º —á–∞—Å—Ç—è–º –ë–î"""
    staging_stats = await ApartmentService.get_statistics(staging_only=True)
    production_stats = await ApartmentService.get_statistics(staging_only=False)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("\nüóÑÔ∏è Staging –¥–∞–Ω–Ω—ã–µ (–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ):")
    print(f"   –í—Å–µ–≥–æ: {staging_stats['total_apartments']}")
    print(f"   –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {staging_stats['pending_apartments']}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {staging_stats['processed_apartments']}")
    print(f"   ‚îú‚îÄ‚îÄ –û–¥–æ–±—Ä–µ–Ω–æ: {staging_stats['approved_apartments']}")
    print(f"   ‚îî‚îÄ‚îÄ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {staging_stats['rejected_apartments']}")
    
    print("\nüè¶ Production –¥–∞–Ω–Ω—ã–µ (–≥–æ—Ç–æ–≤—ã–µ):")
    print(f"   –í—Å–µ–≥–æ: {production_stats['total_apartments']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {production_stats['active_apartments']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {production_stats['average_price']:,} ‚ÇΩ")

async def search_apartments(status: str = None, limit: int = 10, staging: bool = True):
    """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    from DB.models import async_session, Apartment
    from sqlalchemy import select, and_
    from sqlalchemy.orm import selectinload
    
    async with async_session() as session:
        query = select(Apartment).options(
            selectinload(Apartment.metro_stations)
        )
        
        conditions = [Apartment.is_staging == staging]
        
        if staging and status:
            conditions.append(Apartment.filter_status == status)
        elif not staging:
            conditions.append(Apartment.is_active == True)
        
        if conditions:
            query = query.where(and_(*conditions))
        
        query = query.order_by(Apartment.first_seen.desc()).limit(limit)
        
        result = await session.execute(query)
        apartments = result.scalars().all()
    
    if not apartments:
        print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    status_emoji = {'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå'}
    db_name = "staging" if staging else "production"
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(apartments)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({db_name}):\n")
    
    for i, apt in enumerate(apartments, 1):
        if staging:
            emoji = status_emoji.get(apt.filter_status, '‚ùì')
        else:
            emoji = '‚úÖ' if apt.is_active else '‚ùå'
        
        price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        metro_info = []
        for metro in apt.metro_stations[:2]:
            metro_info.append(f"{metro.station_name} ({metro.travel_time})")
        metro_str = f" | üöá {', '.join(metro_info)}" if metro_info else ""
        
        print(f"{i:2d}. {emoji} {price_str}")
        print(f"    {apt.title}")
        print(f"    üìÖ {apt.first_seen.strftime('%d.%m.%Y %H:%M')} | ID: {apt.cian_id}")
        
        if staging and apt.filter_reason:
            print(f"    üí≠ {apt.filter_reason}")
        
        print(f"    üîó {apt.url}")
        if metro_str:
            print(f"    {metro_str}")
        print()

async def show_filter_logs(cian_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    from DB.models import async_session, FilterLog
    from sqlalchemy import select
    
    async with async_session() as session:
        query = select(FilterLog).where(
            FilterLog.apartment_cian_id == cian_id
        ).order_by(FilterLog.executed_at)
        
        result = await session.execute(query)
        logs = result.scalars().all()
    
    if not logs:
        print(f"‚ùå –õ–æ–≥–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {cian_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –õ–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {cian_id}:\n")
    
    for log in logs:
        emoji = "‚úÖ" if log.result == "pass" else "‚ùå"
        print(f"{emoji} {log.filter_name}")
        print(f"   {log.reason}")
        print(f"   {log.executed_at.strftime('%d.%m.%Y %H:%M:%S')}")
        print()

async def analyze_market_prices(rooms: int = None, metro: str = None):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω"""
    
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω")
    print("=" * 40)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    general_stats = await ApartmentService.calculate_weighted_average_price()
    
    print("üè† –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞:")
    if general_stats['count'] > 0:
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {general_stats['average_price']:,} ‚ÇΩ")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {general_stats['median_price']:,} ‚ÇΩ") 
        print(f"   –¶–µ–Ω–∞ –∑–∞ –º¬≤: {general_stats['average_price_per_sqm']:,} ‚ÇΩ/–º¬≤")
        print(f"   –û–±—ä—è–≤–ª–µ–Ω–∏–π: {general_stats['count']}")
    else:
        print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
    if rooms:
        rooms_stats = await ApartmentService.calculate_weighted_average_price(rooms=rooms)
        
        print(f"\nüè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä:")
        if rooms_stats['count'] > 0:
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {rooms_stats['average_price']:,} ‚ÇΩ")
            print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {rooms_stats['median_price']:,} ‚ÇΩ")
            print(f"   –¶–µ–Ω–∞ –∑–∞ –º¬≤: {rooms_stats['average_price_per_sqm']:,} ‚ÇΩ/–º¬≤")
            print(f"   –û–±—ä—è–≤–ª–µ–Ω–∏–π: {rooms_stats['count']}")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
    if metro:
        metro_stats = await ApartmentService.calculate_weighted_average_price(
            rooms=rooms, metro_station=metro
        )
        
        metro_name = f" —É –º–µ—Ç—Ä–æ {metro}" if metro else ""
        rooms_name = f"{rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö " if rooms else ""
        
        print(f"\nüöá –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {rooms_name}–∫–≤–∞—Ä—Ç–∏—Ä{metro_name}:")
        if metro_stats['count'] > 0:
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {metro_stats['average_price']:,} ‚ÇΩ")
            print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {metro_stats['median_price']:,} ‚ÇΩ")
            print(f"   –¶–µ–Ω–∞ –∑–∞ –º¬≤: {metro_stats['average_price_per_sqm']:,} ‚ÇΩ/–º¬≤")
            print(f"   –û–±—ä—è–≤–ª–µ–Ω–∏–π: {metro_stats['count']}")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–æ–ø —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    print(f"\nüìç –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ (—Ç–æ–ø-10):")
    from DB.models import async_session, Apartment, MetroStation
    from sqlalchemy import select, func, and_
    
    async with async_session() as session:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Å—Ç–∞–Ω—Ü–∏–π
        query = select(
            MetroStation.station_name,
            func.count(MetroStation.apartment_id).label('count'),
            func.avg(Apartment.price).label('avg_price')
        ).join(Apartment).where(
            and_(Apartment.is_staging == False, Apartment.is_active == True)
        ).group_by(MetroStation.station_name).order_by(
            func.count(MetroStation.apartment_id).desc()
        ).limit(10)
        
        result = await session.execute(query)
        top_stations = result.all()
        
        for i, (station, count, avg_price) in enumerate(top_stations, 1):
            price_str = f"{avg_price:,.0f} ‚ÇΩ" if avg_price else "–Ω/–¥"
            print(f"{i:2d}. {station}: {count} –∫–≤–∞—Ä—Ç–∏—Ä, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {price_str}")

def create_custom_config() -> FilterConfig:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞...")
    print("(–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    config = FilterConfig()
    
    # –¶–µ–Ω–∞
    max_price = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Ä—É–±): ").strip()
    if max_price:
        config.max_price = int(max_price)
    
    min_price = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Ä—É–±): ").strip()
    if min_price:
        config.min_price = int(min_price)
    
    # –ú–µ—Ç—Ä–æ
    metro_time = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–º–∏–Ω): ").strip()
    if metro_time:
        config.required_metro_distance = int(metro_time)
    
    # –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
    metro_stations = input("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
    if metro_stations:
        config.allowed_metro_stations = [s.strip() for s in metro_stations.split(',')]
    
    # –ü–ª–æ—â–∞–¥—å
    min_area = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤): ").strip()
    if min_area:
        config.min_area = float(min_area)
    
    # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    blocked_words = input("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
    if blocked_words:
        config.blocked_keywords = [w.strip() for w in blocked_words.split(',')]
    
    # –†—ã–Ω–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    enable_market = input("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
    if enable_market != 'n':
        config.enable_market_filter = True
        
        market_discount = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
        if market_discount:
            config.min_market_discount_percent = float(market_discount)
        
        print(f"   üéØ –ë—É–¥—É—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞ –Ω–∞ {config.min_market_discount_percent}%+")
    else:
        config.enable_market_filter = False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    return config

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description='–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –≤ –µ–¥–∏–Ω–æ–π –ë–î')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    filter_parser = subparsers.add_parser('filter', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é')
    filter_parser.add_argument('--config', choices=['default', 'premium', 'bargain', 'bootstrap', 'custom'], 
                              default='default', help='–¢–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    filter_parser.add_argument('--limit', type=int, default=50, 
                              help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    filter_parser.add_argument('--verbose', '-v', action='store_true', 
                              help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ–¥–∏–Ω–æ–π –ë–î')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
    search_parser.add_argument('--staging', action='store_true', help='–ü–æ–∏—Å–∫ –≤ staging –¥–∞–Ω–Ω—ã—Ö')
    search_parser.add_argument('--production', action='store_true', help='–ü–æ–∏—Å–∫ –≤ production –¥–∞–Ω–Ω—ã—Ö')
    search_parser.add_argument('--status', choices=['pending', 'approved', 'rejected'], 
                              help='–°—Ç–∞—Ç—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è staging)')
    search_parser.add_argument('--limit', type=int, default=10, help='–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    logs_parser = subparsers.add_parser('logs', help='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
    logs_parser.add_argument('cian_id', help='ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Cian')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
    market_parser = subparsers.add_parser('market', help='–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω')
    market_parser.add_argument('--rooms', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    market_parser.add_argument('--metro', help='–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    args = parser.parse_args()
    
    if args.command == 'filter':
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if args.config == 'default':
            config = DEFAULT_FILTER_CONFIG
            print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            print(f"   üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É: {config.min_market_discount_percent}%")
        elif args.config == 'premium':
            config = PREMIUM_FILTER_CONFIG
            print("üíé –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            print(f"   üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É: {config.min_market_discount_percent}%")
        elif args.config == 'bargain':
            config = BARGAIN_HUNTER_CONFIG
            print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏")
            print(f"   üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É: {config.min_market_discount_percent}%")
        elif args.config == 'bootstrap':
            config = BOOTSTRAP_CONFIG
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bootstrap –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è)")
            print("   üìä –†—ã–Ω–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω - —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        elif args.config == 'custom':
            config = create_custom_config()
        else:
            config = DEFAULT_FILTER_CONFIG
        
        asyncio.run(run_filter(config, args.limit, args.verbose))
        
    elif args.command == 'stats':
        asyncio.run(show_stats())
        
    elif args.command == 'search':
        staging = True
        if args.production:
            staging = False
        elif not args.staging:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –≤ staging –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            staging = True
        
        asyncio.run(search_apartments(
            status=args.status,
            limit=args.limit,
            staging=staging
        ))
        
    elif args.command == 'logs':
        asyncio.run(show_filter_logs(args.cian_id))
    
    elif args.command == 'market':
        asyncio.run(analyze_market_prices(args.rooms, args.metro))
        
    else:
        parser.print_help()

if __name__ == "__main__":
    main()