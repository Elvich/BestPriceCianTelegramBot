"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
"""

import asyncio
import sys
import argparse
from typing import Optional, List
from datetime import datetime, timedelta

from DB.apartment_service import ApartmentService
from DB.Models import async_session, Apartment, MetroStation
from utils.excel_exporter import ExcelExporter

async def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    stats = await ApartmentService.get_statistics()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_apartments']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_apartments']}")
    print(f"   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_apartments']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']:,} ‚ÇΩ")

async def search_apartments(
    min_price: Optional[int] = None,
    max_price: Optional[int] = None,
    metro: Optional[List[str]] = None,
    limit: int = 10
):
    """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    print(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ª–∏–º–∏—Ç: {limit}):")
    
    if min_price:
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price:,} ‚ÇΩ")
    if max_price:
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price:,} ‚ÇΩ")
    if metro:
        print(f"   –†—è–¥–æ–º —Å –º–µ—Ç—Ä–æ: {', '.join(metro)}")
    
    apartments = await ApartmentService.get_apartments(
        limit=limit,
        min_price=min_price,
        max_price=max_price,
        metro_stations=metro,
        only_active=True
    )
    
    if not apartments:
        print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apartments)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    
    for i, apt in enumerate(apartments, 1):
        price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        price_per_sqm_str = f"({apt.price_per_sqm:,} ‚ÇΩ/–º¬≤)" if apt.price_per_sqm else ""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–æ
        metro_info = []
        for metro_station in apt.metro_stations[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
            metro_info.append(f"{metro_station.station_name} {metro_station.travel_time}")
        metro_str = f" | üöá {', '.join(metro_info)}" if metro_info else ""
        
        # –ê–¥—Ä–µ—Å
        address_str = f" | üìç {apt.address}" if apt.address else ""
        
        print(f"\n{i:2d}. {price_str} {price_per_sqm_str}")
        print(f"    {apt.title}")
        print(f"    üîó {apt.url}")
        if metro_str or address_str:
            print(f"    {metro_str}{address_str}")

async def list_metro_stations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –≤ –±–∞–∑–µ"""
    async with async_session() as session:
        from sqlalchemy import select
        
        query = select(MetroStation.station_name).distinct().order_by(MetroStation.station_name)
        result = await session.execute(query)
        stations = result.scalars().all()
        
        print(f"üöá –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –≤ –±–∞–∑–µ ({len(stations)}):")
        for station in stations:
            print(f"   ‚Ä¢ {station}")

async def recent_additions(days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    async with async_session() as session:
        from sqlalchemy import select, and_
        
        since_date = datetime.utcnow() - timedelta(days=days)
        
        query = select(Apartment).where(
            and_(
                Apartment.first_seen >= since_date,
                Apartment.is_active == True
            )
        ).order_by(Apartment.first_seen.desc()).limit(20)
        
        result = await session.execute(query)
        apartments = result.scalars().all()
        
        print(f"üÜï –û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π ({len(apartments)}):")
        
        for apt in apartments:
            price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            date_str = apt.first_seen.strftime("%d.%m.%Y %H:%M")
            print(f"   ‚Ä¢ {date_str} - {price_str} - {apt.title[:50]}...")

async def export_data(filename=None, max_price=None, min_price=None, metro=None, limit=500, stats_only=False):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        service = ApartmentService()
        exporter = ExcelExporter()
        
        if stats_only:
            # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if not filename:
                filename = f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            result_filename = await exporter.export_statistics_to_excel(filename)
            
            if result_filename:
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: {result_filename}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            # –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            if not filename:
                filename = f"apartments_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            result_filename = await exporter.export_apartments_to_excel(
                filename=filename,
                limit=limit,
                min_price=min_price,
                max_price=max_price,
                metro_stations=metro
            )
            
            if result_filename:
                print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {result_filename}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
    search_parser.add_argument('--min-price', type=int, help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
    search_parser.add_argument('--max-price', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
    search_parser.add_argument('--metro', nargs='+', help='–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ')
    search_parser.add_argument('--limit', type=int, default=10, help='–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
    subparsers.add_parser('metro', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
    recent_parser = subparsers.add_parser('recent', help='–ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    recent_parser.add_argument('--days', type=int, default=7, help='–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel')
    export_parser.add_argument('--filename', type=str, help='–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    export_parser.add_argument('--max-price', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
    export_parser.add_argument('--min-price', type=int, help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
    export_parser.add_argument('--metro', nargs='+', help='–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ')
    export_parser.add_argument('--limit', type=int, default=500, help='–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π')
    export_parser.add_argument('--stats', action='store_true', help='–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    
    args = parser.parse_args()
    
    if args.command == 'stats':
        asyncio.run(show_statistics())
    elif args.command == 'search':
        asyncio.run(search_apartments(
            min_price=args.min_price,
            max_price=args.max_price,
            metro=args.metro,
            limit=args.limit
        ))
    elif args.command == 'metro':
        asyncio.run(list_metro_stations())
    elif args.command == 'recent':
        asyncio.run(recent_additions(days=args.days))
    elif args.command == 'export':
        asyncio.run(export_data(
            filename=args.filename,
            max_price=args.max_price,
            min_price=args.min_price,
            metro=args.metro,
            limit=args.limit,
            stats_only=args.stats
        ))
    else:
        parser.print_help()

if __name__ == "__main__":
    main()