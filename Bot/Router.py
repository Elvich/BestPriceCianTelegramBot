from aiogram import Router, F 
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
import Bot.Kb as kb
import sys
import os
import logging
from functools import wraps
import asyncio
from Bot.error_handlers import network_retry, RetryConfig, NetworkMonitor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from DB.apartment_service import ApartmentService
from DB.notification_service import NotificationService
from DB.user_service import UserService
from DB.reaction_service import ReactionService
from utils.excel_exporter import ExcelExporter
from Bot.notification_sender import NotificationSender

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
RETRY_CONFIG = RetryConfig()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_network_errors(func):
    @wraps(func)
    @network_retry(config=RETRY_CONFIG)
    async def wrapper(*args, **kwargs):
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
            user_obj = None
            if args:
                if hasattr(args[0], 'from_user'):  # Message –∏–ª–∏ CallbackQuery
                    user = args[0].from_user
                    user_obj = await UserService.get_or_create_user(
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name
                    )
                    
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                if args and hasattr(args[0], 'answer'):
                    await args[0].answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif args and hasattr(args[0], 'message') and hasattr(args[0].message, 'answer'):
                    await args[0].message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            
            raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(callback, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(callback.message, 'text') and callback.message.text == text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
            return
        
        await callback.message.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, **kwargs)
    except Exception as e:
        logger.error(f"Error in safe_edit_message: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(CommandStart())
@handle_network_errors
async def command_start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –±–æ—Ç–∞
    await NotificationService.mark_notifications_read(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    new_count = len(await NotificationService.get_new_apartments_for_user(user_id, limit=1))
    new_indicator = f"\n\nüÜï –Ø –Ω–∞—à–µ–ª {new_count} –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä!" if new_count > 0 else ""
    
    await message.answer(
        text=f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üè†

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –¶–∏–∞–Ω –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, —è –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

–∏–ª–∏

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏{new_indicator}""", 
        reply_markup=kb.main_menu
    )

@router.message(Command("search"))
@handle_network_errors
async def search_apartments_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–ª–µ–µ—Ä"""
    await message.answer(
        "üè† **–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —É–¥–æ–±–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä!**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.",
        parse_mode="Markdown",
        reply_markup=kb.main_menu
    )

@router.message(Command("stats"))
@handle_network_errors
async def stats_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats = await ApartmentService.get_statistics()
        
        response = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_apartments']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_apartments']}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_apartments']}
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']:,} ‚ÇΩ"""
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(Command("recent"))  
@handle_network_errors
async def recent_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        from DB.Models import async_session, Apartment
        from sqlalchemy import select, and_
        from datetime import datetime, timedelta
        
        since_date = datetime.utcnow() - timedelta(days=7)
        
        async with async_session() as session:
            query = select(Apartment).where(
                and_(
                    Apartment.first_seen >= since_date,
                    Apartment.is_active == True
                )
            ).order_by(Apartment.first_seen.desc()).limit(5)
            
            result = await session.execute(query)
            apartments = result.scalars().all()
        
        if not apartments:
            await message.answer("üì≠ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = f"üÜï **–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(apartments)}):**\n\n"
        
        for apt in apartments:
            price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            date_str = apt.first_seen.strftime("%d.%m.%Y")
            
            response += f"**{date_str} - {price_str}**\n"
            response += f"{apt.title[:60]}...\n"
            response += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({apt.url})\n\n"
        
        await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {str(e)}")

@router.callback_query(F.data == "help")
@handle_network_errors
async def help_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üè† /start - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
üÜï /recent - –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚ù§Ô∏è /liked - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
üëé /disliked - –°–∫—Ä—ã—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
üìÑ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–æ—Ä–º–∞—Ç

**–°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤:**
‚ù§Ô∏è **–õ–∞–π–∫** - –¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
üëé **–î–∏–∑–ª–∞–π–∫** - —Å–∫—Ä—ã—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
–ù–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
–ë–æ—Ç –ø–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Cian.ru –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""

    await safe_edit_message(callback, help_text, parse_mode="Markdown", reply_markup=kb.back_to_menu)

@router.callback_query(F.data == "back_to_menu")
@handle_network_errors
async def back_to_menu_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = f"""–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}! üè†

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –¶–∏–∞–Ω –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.
"""
    
    await safe_edit_message(callback, text, reply_markup=kb.main_menu)

@router.callback_query(F.data.startswith("back_to_list_"))
@handle_network_errors
async def back_to_list_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É (–∏–∑ –ø–ª–µ–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ–±–∑–æ—Ä—É —Å–ø–∏—Å–∫–∞)"""
    try:
        list_context = callback.data.split('_')[3]
        
        if list_context == "liked":
            await my_likes_handler(callback)
        elif list_context == "disliked":
            await my_dislikes_handler(callback)
        elif list_context == "new":
            await recent_callback_handler(callback)
            
    except Exception as e:
        logger.error(f"Error in back_to_list_handler: {e}")
        await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É", reply_markup=kb.back_to_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "browse")
@handle_network_errors
async def browse_apartments_handler(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ä–µ–∂–∏–º–µ –ø–ª–µ–µ—Ä–∞"""
    await browse_apartments_helper(callback, index=0)
    await callback.answer()

@router.callback_query(F.data == "stats") 
@handle_network_errors
async def stats_callback_handler(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        stats = await ApartmentService.get_statistics()
        
        response = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_apartments']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_apartments']}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_apartments']}
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']:,} ‚ÇΩ"""
        
        await safe_edit_message(callback, response, parse_mode="Markdown", reply_markup=kb.back_to_menu)
        
    except Exception as e:
        logger.error(f"Error in stats_callback_handler: {e}")
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", reply_markup=kb.back_to_menu)


@router.callback_query(F.data == "recent")
@handle_network_errors
async def recent_callback_handler(callback: CallbackQuery):
    """–ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–µ–µ—Ä–µ"""
    try:
        user_id = callback.from_user.id
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        await NotificationService.mark_notifications_read(user_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–µ–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
        await browse_apartments_list_helper(callback, index=0, list_context="new")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in recent_callback_handler: {e}")
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {str(e)}", reply_markup=kb.back_to_menu)



async def browse_apartments_helper(callback: CallbackQuery, index: int = 0):
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ä–µ–∂–∏–º–µ –ø–ª–µ–µ—Ä–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∏—Å–∫–ª—é—á–∞—è –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        apartments = await ApartmentService.get_apartments(
            limit=50,  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            only_active=True,
            only_production=True,
            exclude_disliked_for_user=user_id
        )
        
        if not apartments:
            await safe_edit_message(
                callback, 
                "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.",
                reply_markup=kb.back_to_menu
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞
        if index < 0 or index >= len(apartments):
            index = 0
        
        apartment = apartments[index]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_reaction = await ReactionService.get_user_reaction(user_id, apartment.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        price_str = f"{apartment.price:,} ‚ÇΩ" if apartment.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        price_per_sqm_str = f" ({apartment.price_per_sqm:,} ‚ÇΩ/–º¬≤)" if apartment.price_per_sqm else ""
        
        metro_info = []
        for metro in apartment.metro_stations[:2]:
            metro_info.append(f"{metro.station_name} {metro.travel_time}")
        metro_str = f"\nüöá {', '.join(metro_info)}" if metro_info else ""
        
        address_str = f"\nüìç {apartment.address}" if apartment.address else ""
        
        apartment_info = f"**{price_str}**{price_per_sqm_str}"
        apartment_info += f"\n{apartment.title}"
        apartment_info += metro_str
        apartment_info += address_str
        apartment_info += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Cian]({apartment.url})"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
        position_info = f"üìã **–ö–≤–∞—Ä—Ç–∏—Ä–∞ {index + 1} –∏–∑ {len(apartments)}**\n\n"
        
        text = position_info + apartment_info
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–ª–µ–µ—Ä–∞
        keyboard = kb.create_apartment_browser_keyboard(
            current_index=index,
            total_count=len(apartments),
            apartment_id=apartment.id,
            current_reaction=current_reaction,
            list_context="all"
        )
        
        await safe_edit_message(
            callback,
            text,
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error in browse_apartments_helper: {e}")
        await safe_edit_message(
            callback,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä: {str(e)}",
            reply_markup=kb.back_to_menu
        )

async def browse_apartments_list_helper(callback: CallbackQuery, index: int, list_context: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ä–µ–∂–∏–º–µ –ø–ª–µ–µ—Ä–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if list_context == "all":
            apartments = await ApartmentService.get_apartments(
                limit=50,
                only_active=True,
                only_production=True,
                exclude_disliked_for_user=user_id
            )
            title_prefix = "üè† –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä"
        elif list_context == "liked":
            apartments = await ReactionService.get_user_liked_apartments(user_id, limit=50)
            title_prefix = "‚ù§Ô∏è –í–∞—à–∏ –ª–∞–π–∫–∏"
        elif list_context == "disliked":
            apartments = await ReactionService.get_user_disliked_apartments(user_id, limit=50)
            title_prefix = "üëé –°–∫—Ä—ã—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
        elif list_context == "new":
            apartments = await NotificationService.get_new_apartments_for_user(user_id, limit=50)
            title_prefix = "üÜï –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
        else:
            apartments = []
            title_prefix = "üìã –ö–≤–∞—Ä—Ç–∏—Ä—ã"
        
        if not apartments:
            empty_messages = {
                "all": "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.",
                "liked": "‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚ù§Ô∏è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä.",
                "disliked": "üëé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üëé –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä.",
                "new": "üÜï –ù–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç."
            }
            
            await safe_edit_message(
                callback, 
                empty_messages.get(list_context, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."),
                reply_markup=kb.back_to_menu
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞
        if index < 0 or index >= len(apartments):
            index = 0
        
        apartment = apartments[index]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_reaction = await ReactionService.get_user_reaction(user_id, apartment.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        price_str = f"{apartment.price:,} ‚ÇΩ" if apartment.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        price_per_sqm_str = f" ({apartment.price_per_sqm:,} ‚ÇΩ/–º¬≤)" if apartment.price_per_sqm else ""
        
        metro_info = []
        for metro in apartment.metro_stations[:2]:
            metro_info.append(f"{metro.station_name} {metro.travel_time}")
        metro_str = f"\nüöá {', '.join(metro_info)}" if metro_info else ""
        
        address_str = f"\nüìç {apartment.address}" if apartment.address else ""
        
        apartment_info = f"**{price_str}**{price_per_sqm_str}"
        apartment_info += f"\n{apartment.title}"
        apartment_info += metro_str
        apartment_info += address_str
        apartment_info += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Cian]({apartment.url})"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
        position_info = f"üìã **{title_prefix} - {index + 1} –∏–∑ {len(apartments)}**\n\n"
        
        text = position_info + apartment_info
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–ª–µ–µ—Ä–∞
        keyboard = kb.create_apartment_browser_keyboard(
            current_index=index,
            total_count=len(apartments),
            apartment_id=apartment.id,
            current_reaction=current_reaction,
            list_context=list_context
        )
        
        await safe_edit_message(
            callback,
            text,
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error in browse_apartments_list_helper: {e}")
        await safe_edit_message(
            callback,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä: {str(e)}",
            reply_markup=kb.back_to_menu
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("export"))
@handle_network_errors
async def export_command_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer(
        "üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=kb.export_menu
    )

@router.callback_query(F.data == "export_menu")
@handle_network_errors
async def export_menu_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await safe_edit_message(callback, "üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_browse")
@handle_network_errors
async def export_browse_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...", show_alert=True)
    
    try:
        user_id = callback.from_user.id
        
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_browse_apartments_to_excel(user_id)
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üè† **–ö–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏—Å–∫–ª—é—á–µ–Ω—ã –≤–∞—à–∏ –¥–∏–∑–ª–∞–π–∫–∏).",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        await safe_edit_message(callback, "‚úÖ **–§–∞–π–ª —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in export_browse_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_liked")
@handle_network_errors
async def export_liked_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–≤–∞—Ä—Ç–∏—Ä"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...", show_alert=True)
    
    try:
        user_id = callback.from_user.id
        
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –≤–∞—à–∏–º–∏ –ª–∞–π–∫–∞–º–∏...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_user_liked_apartments_to_excel(user_id)
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="‚ù§Ô∏è **–í–∞—à–∏ –ª–∞–π–∫–Ω—É—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        await safe_edit_message(callback, "‚úÖ **–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –ª–∞–π–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in export_liked_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_all")
@handle_network_errors
async def export_all_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...", show_alert=True)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        file_path = await ExcelExporter.export_apartments_to_excel()  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üìã **–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
            parse_mode="Markdown"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        await safe_edit_message(callback, "‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_all_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)



@router.callback_query(F.data == "export_stats")
@handle_network_errors
async def export_stats_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", show_alert=True)
    
    try:
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_statistics_to_excel()
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–æ–ø –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        
        await safe_edit_message(callback, "‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_stats_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)


        
    except Exception as e:
        logger.error(f"Error in export_top50_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø-50:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò –í –ü–õ–ï–ï–†–ï =====

@router.callback_query(F.data.startswith("browse_prev_"))
@handle_network_errors
async def browse_previous_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –ø–ª–µ–µ—Ä–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split('_')
        current_index = int(parts[2])
        list_context = parts[3] if len(parts) > 3 else "all"
        new_index = current_index - 1
        
        if new_index >= 0:
            if list_context == "all":
                await browse_apartments_helper(callback, index=new_index)
            else:
                await browse_apartments_list_helper(callback, index=new_index, list_context=list_context)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in browse_previous_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ")

@router.callback_query(F.data.startswith("browse_next_"))
@handle_network_errors
async def browse_next_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –ø–ª–µ–µ—Ä–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split('_')
        current_index = int(parts[2])
        list_context = parts[3] if len(parts) > 3 else "all"
        new_index = current_index + 1
        
        # –§—É–Ω–∫—Ü–∏–∏ —Å–∞–º–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        if list_context == "all":
            await browse_apartments_helper(callback, index=new_index)
        else:
            await browse_apartments_list_helper(callback, index=new_index, list_context=list_context)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in browse_next_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ê–ö–¶–ò–ô =====

@router.callback_query(F.data.startswith("reaction_"))
@handle_network_errors
async def reaction_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞"""
    user_id = callback.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data: "reaction_like_123_context_index" –∏–ª–∏ "reaction_dislike_123"
    try:
        parts = callback.data.split('_')
        reaction_type = parts[1]  # 'like' –∏–ª–∏ 'dislike'
        apartment_id = int(parts[2])
        list_context = parts[3] if len(parts) > 3 else "all"
        current_index = int(parts[4]) if len(parts) > 4 else 0
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_reaction = await ReactionService.get_user_reaction(user_id, apartment_id)
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        if current_reaction and current_reaction != reaction_type:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è, —É–±–∏—Ä–∞–µ–º –µ—ë –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
            await ReactionService.remove_reaction(user_id, apartment_id)
            result = await ReactionService.toggle_reaction(user_id, apartment_id, reaction_type)
            
            if reaction_type == 'like':
                message = "‚ù§Ô∏è –£–±—Ä–∞–ª–∏ –¥–∏–∑–ª–∞–π–∫ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!"
            else:
                message = "üëé –£–±—Ä–∞–ª–∏ –ª–∞–π–∫ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!"
        else:
            # –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
            result = await ReactionService.toggle_reaction(user_id, apartment_id, reaction_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if result['action'] == 'added':
                if reaction_type == 'like':
                    message = "‚ù§Ô∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
                else:
                    message = "üëé –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–∫—Ä—ã—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"
            elif result['action'] == 'removed':
                if reaction_type == 'like':
                    message = "üíî –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                else:
                    message = "‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è"
            else:
                message = "‚úÖ –†–µ–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        
        await callback.answer(message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if list_context == "all":
            await browse_apartments_helper(callback, index=current_index)
        else:
            await browse_apartments_list_helper(callback, index=current_index, list_context=list_context)
            
    except Exception as e:
        logger.error(f"Error in reaction_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "my_likes")
@handle_network_errors  
async def my_likes_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–ª–µ–µ—Ä–µ"""
    await browse_apartments_list_helper(callback, index=0, list_context="liked")
    await callback.answer()

@router.callback_query(F.data == "my_dislikes")
@handle_network_errors
async def my_dislikes_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–ª–µ–µ—Ä–µ"""
    await browse_apartments_list_helper(callback, index=0, list_context="disliked")
    await callback.answer()

@router.callback_query(F.data.startswith("remove_reaction_"))
@handle_network_errors
async def remove_reaction_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤"""
    user_id = callback.from_user.id
    
    try:
        apartment_id = int(callback.data.split('_')[2])
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        removed = await ReactionService.remove_reaction(user_id, apartment_id)
        
        if removed:
            await callback.answer("‚úÖ –†–µ–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
        else:
            await callback.answer("‚ùå –†–µ–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in remove_reaction_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏", show_alert=True)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–∫—Ü–∏—è–º
@router.message(Command("liked"))
@handle_network_errors
async def liked_command_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä"""
    await message.answer(
        "‚ù§Ô∏è **–í–∞—à–∏ –ª–∞–π–∫–∏**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–ª–µ–µ—Ä–µ:",
        parse_mode="Markdown",
        reply_markup=kb.main_menu
    )

@router.message(Command("disliked"))
@handle_network_errors
async def disliked_command_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä"""
    await message.answer(
        "üëé **–°–∫—Ä—ã—Ç—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–ª–µ–µ—Ä–µ:",
        parse_mode="Markdown",
        reply_markup=kb.main_menu
    )
    