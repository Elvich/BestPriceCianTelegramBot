from aiogram import Router, F 
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from . import kb
import sys
import os
import logging
from functools import wraps
import asyncio
from .error_handlers import network_retry, RetryConfig, NetworkMonitor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from DB.apartment_service import ApartmentService
from utils.excel_exporter import ExcelExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
RETRY_CONFIG = RetryConfig(max_retries=3, base_delay=1.0, exponential_backoff=True)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
def handle_network_errors(func):
    @wraps(func)
    @network_retry(config=RETRY_CONFIG)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                if args and hasattr(args[0], 'answer'):
                    await args[0].answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif args and hasattr(args[0], 'message') and hasattr(args[0].message, 'answer'):
                    await args[0].message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            
            raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(callback, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(callback.message, 'text') and callback.message.text == text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
            return
        
        await callback.message.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, **kwargs)
    except Exception as e:
        logger.error(f"Error in safe_edit_message: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(CommandStart())
@handle_network_errors
async def command_start_handler(message: Message, state: FSMContext):
    await message.answer(
        text=f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üè†

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –¶–∏–∞–Ω –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üîç /search - –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
üöá /metro - –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
üÜï /recent - –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
üìÑ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search""", 
        reply_markup=kb.main_menu
    )

@router.message(Command("search"))
@handle_network_errors
async def search_apartments_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä"""
    await search_apartments_helper(message)

@router.message(Command("stats"))
@handle_network_errors
async def stats_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats = await ApartmentService.get_statistics()
        
        response = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_apartments']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_apartments']}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_apartments']}
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']:,} ‚ÇΩ"""
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(Command("metro"))
@handle_network_errors
async def metro_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ"""
    try:
        from DB.models import async_session, MetroStation
        from sqlalchemy import select
        
        async with async_session() as session:
            query = select(MetroStation.station_name).distinct().order_by(MetroStation.station_name)
            result = await session.execute(query)
            stations = result.scalars().all()
        
        if not stations:
            await message.answer("‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        response = f"üöá **–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –≤ –±–∞–∑–µ ({len(stations)}):**\n\n"
        response += "\n".join([f"‚Ä¢ {station}" for station in stations])
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: {str(e)}")

@router.message(Command("recent"))  
@handle_network_errors
async def recent_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        from DB.models import async_session, Apartment
        from sqlalchemy import select, and_
        from datetime import datetime, timedelta
        
        since_date = datetime.utcnow() - timedelta(days=7)
        
        async with async_session() as session:
            query = select(Apartment).where(
                and_(
                    Apartment.first_seen >= since_date,
                    Apartment.is_active == True
                )
            ).order_by(Apartment.first_seen.desc()).limit(5)
            
            result = await session.execute(query)
            apartments = result.scalars().all()
        
        if not apartments:
            await message.answer("üì≠ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = f"üÜï **–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é ({len(apartments)}):**\n\n"
        
        for apt in apartments:
            price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            date_str = apt.first_seen.strftime("%d.%m.%Y")
            
            response += f"**{date_str} - {price_str}**\n"
            response += f"{apt.title[:60]}...\n"
            response += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({apt.url})\n\n"
        
        await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {str(e)}")

@router.callback_query(F.data == "help")
@handle_network_errors
async def help_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üîç /search - –ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
üöá /metro - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
üÜï /recent - –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
üìÑ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–æ—Ä–º–∞—Ç

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
–ë–æ—Ç –ø–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Cian.ru –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏ –ª–æ–∫–∞—Ü–∏–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""

    await safe_edit_message(callback, help_text, parse_mode="Markdown", reply_markup=kb.back_to_menu)

@router.callback_query(F.data == "back_to_menu")
@handle_network_errors
async def back_to_menu_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = f"""–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}! üè†

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –¶–∏–∞–Ω –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
üîç /search - –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
üöá /metro - –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ"""
    
    await safe_edit_message(callback, text, reply_markup=kb.main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "search")
@handle_network_errors
async def search_callback_handler(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /search
    message = callback.message
    await search_apartments_helper(message, is_callback=True)
    await callback.answer()

@router.callback_query(F.data == "stats") 
@handle_network_errors
async def stats_callback_handler(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        stats = await ApartmentService.get_statistics()
        
        response = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_apartments']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_apartments']}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_apartments']}
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']:,} ‚ÇΩ"""
        
        await safe_edit_message(callback, response, parse_mode="Markdown", reply_markup=kb.back_to_menu)
        
    except Exception as e:
        logger.error(f"Error in stats_callback_handler: {e}")
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", reply_markup=kb.back_to_menu)

@router.callback_query(F.data == "metro")
@handle_network_errors
async def metro_callback_handler(callback: CallbackQuery):
    """–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        from DB.models import async_session, MetroStation
        from sqlalchemy import select
        
        async with async_session() as session:
            query = select(MetroStation.station_name).distinct().order_by(MetroStation.station_name)
            result = await session.execute(query)
            stations = result.scalars().all()
        
        if not stations:
            await safe_edit_message(callback, "‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=kb.back_to_menu)
            return
        
        response = f"üöá **–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –≤ –±–∞–∑–µ ({len(stations)}):**\n\n"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        stations_text = "\n".join([f"‚Ä¢ {station}" for station in stations[:20]])
        response += stations_text
        
        if len(stations) > 20:
            response += f"\n\n... –∏ –µ—â–µ {len(stations) - 20} —Å—Ç–∞–Ω—Ü–∏–π"
        
        await safe_edit_message(callback, response, parse_mode="Markdown", reply_markup=kb.back_to_menu)
        
    except Exception as e:
        logger.error(f"Error in metro_callback_handler: {e}")
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: {str(e)}", reply_markup=kb.back_to_menu)

@router.callback_query(F.data == "recent")
@handle_network_errors
async def recent_callback_handler(callback: CallbackQuery):
    """–ù–µ–¥–∞–≤–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        from DB.models import async_session, Apartment
        from sqlalchemy import select, and_
        from datetime import datetime, timedelta
        
        since_date = datetime.utcnow() - timedelta(days=7)
        
        async with async_session() as session:
            query = select(Apartment).where(
                and_(
                    Apartment.first_seen >= since_date,
                    Apartment.is_active == True
                )
            ).order_by(Apartment.first_seen.desc()).limit(5)
            
            result = await session.execute(query)
            apartments = result.scalars().all()
        
        if not apartments:
            await safe_edit_message(callback, "üì≠ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb.back_to_menu)
            return
        
        response = f"üÜï **–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é ({len(apartments)}):**\n\n"
        
        for apt in apartments:
            price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            date_str = apt.first_seen.strftime("%d.%m.%Y")
            
            response += f"**{date_str} - {price_str}**\n"
            response += f"{apt.title[:50]}...\n"
            response += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({apt.url})\n\n"
        
        await safe_edit_message(callback, response, parse_mode="Markdown", reply_markup=kb.back_to_menu, disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"Error in recent_callback_handler: {e}")
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {str(e)}", reply_markup=kb.back_to_menu)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
async def search_apartments_helper(message, is_callback=False):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        apartments = await ApartmentService.get_apartments(limit=5, only_active=True, only_production=True)
        
        if not apartments:
            text = "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."
            if is_callback:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è safe_edit_message
                class FakeCallback:
                    def __init__(self, message):
                        self.message = message
                    async def answer(self):
                        pass
                await safe_edit_message(FakeCallback(message), text, reply_markup=kb.back_to_menu)
            else:
                await message.answer(text)
            return
        
        response = "üîç **–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:**\n\n"
        
        for i, apt in enumerate(apartments, 1):
            price_str = f"{apt.price:,} ‚ÇΩ" if apt.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            price_per_sqm_str = f" ({apt.price_per_sqm:,} ‚ÇΩ/–º¬≤)" if apt.price_per_sqm else ""
            
            metro_info = []
            for metro in apt.metro_stations[:2]:
                metro_info.append(f"{metro.station_name} {metro.travel_time}")
            metro_str = f"\nüöá {', '.join(metro_info)}" if metro_info else ""
            
            address_str = f"\nüìç {apt.address}" if apt.address else ""
            
            response += f"**{i}. {price_str}{price_per_sqm_str}**\n"
            response += f"{apt.title}\n"
            response += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Cian]({apt.url})"
            response += metro_str
            response += address_str
            response += "\n\n"
        
        if is_callback:
            class FakeCallback:
                def __init__(self, message):
                    self.message = message
                async def answer(self):
                    pass
            await safe_edit_message(FakeCallback(message), response, parse_mode="Markdown", reply_markup=kb.back_to_menu, disable_web_page_preview=True)
        else:
            await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"Error in search_apartments_helper: {e}")
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
        if is_callback:
            class FakeCallback:
                def __init__(self, message):
                    self.message = message
                async def answer(self):
                    pass
            await safe_edit_message(FakeCallback(message), error_text, reply_markup=kb.back_to_menu)
        else:
            await message.answer(error_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("export"))
@handle_network_errors
async def export_command_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer(
        "üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=kb.export_menu
    )

@router.callback_query(F.data == "export_menu")
@handle_network_errors
async def export_menu_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await safe_edit_message(callback, "üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_all")
@handle_network_errors
async def export_all_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...", show_alert=True)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        file_path = await ExcelExporter.export_apartments_to_excel(limit=500)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 500 –¥–ª—è Telegram
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üìã **–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
            parse_mode="Markdown"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        await safe_edit_message(callback, "‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_all_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_cheap")
@handle_network_errors
async def export_cheap_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä (–¥–æ 15 –º–ª–Ω)"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...", show_alert=True)
    
    try:
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –¥–µ—à–µ–≤—ã–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_apartments_to_excel(
            max_price=20000000,
            limit=500
        )
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üí∞ **–ö–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ 20 –º–ª–Ω —Ä—É–±–ª–µ–π**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        
        await safe_edit_message(callback, "‚úÖ **–§–∞–π–ª —Å –¥–µ—à–µ–≤—ã–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_cheap_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_stats")
@handle_network_errors
async def export_stats_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", show_alert=True)
    
    try:
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_statistics_to_excel()
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–æ–ø –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        
        await safe_edit_message(callback, "‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_stats_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)

@router.callback_query(F.data == "export_top50")
@handle_network_errors
async def export_top50_handler(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ø-50 –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä"""
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Ç–æ–ø-50...", show_alert=True)
    
    try:
        await safe_edit_message(callback, "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø-50 –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="Markdown")
        
        file_path = await ExcelExporter.export_apartments_to_excel(limit=50)
        
        from aiogram.types import FSInputFile
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption="üéØ **–¢–æ–ø-50 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ.",
            parse_mode="Markdown"
        )
        
        os.remove(file_path)
        
        await safe_edit_message(callback, "‚úÖ **–¢–æ–ø-50 –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:", parse_mode="Markdown", reply_markup=kb.export_menu)
        
    except Exception as e:
        logger.error(f"Error in export_top50_handler: {e}")
        await safe_edit_message(callback, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø-50:**\n{str(e)}", parse_mode="Markdown", reply_markup=kb.export_menu)
    