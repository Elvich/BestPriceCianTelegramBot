"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
"""
import asyncio
import logging
from functools import wraps
from typing import Callable, Any, Optional
from aiogram.exceptions import TelegramNetworkError, TelegramServerError, TelegramBadRequest

logger = logging.getLogger(__name__)

class RetryConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    def __init__(self, max_retries: int = None, base_delay: float = None, max_delay: float = None, exponential_backoff: bool = None):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º config –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        from config import config
        
        self.max_retries = max_retries if max_retries is not None else config.NETWORK_RETRY_MAX_ATTEMPTS
        self.base_delay = base_delay if base_delay is not None else config.NETWORK_RETRY_BASE_DELAY
        self.max_delay = max_delay if max_delay is not None else config.NETWORK_RETRY_MAX_DELAY
        self.exponential_backoff = exponential_backoff if exponential_backoff is not None else config.NETWORK_RETRY_EXPONENTIAL_BACKOFF

async def retry_on_network_error(
    func: Callable,
    *args,
    config: Optional[RetryConfig] = None,
    **kwargs
) -> Any:
    """
    –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    """
    if config is None:
        config = RetryConfig()
    
    last_exception = None
    
    for attempt in range(config.max_retries + 1):
        try:
            return await func(*args, **kwargs)
        
        except (TelegramNetworkError, TelegramServerError) as e:
            last_exception = e
            
            if attempt == config.max_retries:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {config.max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
                raise e
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            if config.exponential_backoff:
                delay = min(config.base_delay * (2 ** attempt), config.max_delay)
            else:
                delay = config.base_delay
            
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.max_retries + 1}): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å")
            await asyncio.sleep(delay)
            continue
            
        except TelegramBadRequest as e:
            # –î–ª—è TelegramBadRequest –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã, —ç—Ç–æ –æ–±—ã—á–Ω–æ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏–∫–∏
            if "message is not modified" in str(e).lower():
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ {func.__name__}: {e}")
                return None  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API –≤ {func.__name__}: {e}")
                raise e
                
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            raise e
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if last_exception:
        raise last_exception

def network_retry(config: Optional[RetryConfig] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    """
    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            return await retry_on_network_error(func, *args, config=config, **kwargs)
        return wrapper
    return decorator

async def check_telegram_connection(bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
    """
    try:
        me = await bot.get_me()
        logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –≤ –ø–æ—Ä—è–¥–∫–µ. –ë–æ—Ç: @{me.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
        return False

class NetworkMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏"""
    
    def __init__(self, bot):
        self.bot = bot
        self.last_successful_request = None
        self.consecutive_failures = 0
        
    async def log_request_success(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        import datetime
        self.last_successful_request = datetime.datetime.now()
        if self.consecutive_failures > 0:
            logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {self.consecutive_failures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
            self.consecutive_failures = 0
    
    async def log_request_failure(self, error: Exception):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        self.consecutive_failures += 1
        
        if self.consecutive_failures >= 5:
            logger.warning(f"‚ö†Ô∏è {self.consecutive_failures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram")
        
        # –ö–∞–∂–¥—ã–µ 10 –Ω–µ—É–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.consecutive_failures % 10 == 0:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API...")
            await check_telegram_connection(self.bot)