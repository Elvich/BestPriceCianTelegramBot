import asyncio
import sys


from config import config
from parser.parser import Parser
from parser.url import CIAN_URLS
from DB.apartment_service import ApartmentService
from DB.filter_service import FilterService, DEFAULT_FILTER_CONFIG, BARGAIN_HUNTER_CONFIG

async def parsing(url):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å Cian.ru")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = Parser()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ Cian
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞—Ä—Ç–∏—Ä —Å Cian.ru (–≥–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ 2 —Å—Ç—Ä–∞–Ω–∏—Ü)...")
        url = url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        apartments = parser.parse(url=url, start_page=config.PARSER_DEFAULT_START_PAGE, end_page=config.PARSER_DEFAULT_END_PAGE, write_to_file=False, deep_parse=True)

        if not apartments:
            print("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ–±—ä–µ–∫—Ç—ã Apartment –¥–ª—è –ë–î
        print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        apartment_objects = []
        
        for item in apartments:
            try:
                # –ü—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: [link, name, price, price_per_sqm, details]
                link = item[0] if len(item) > 0 else ""
                name = item[1] if len(item) > 1 else ""
                price_str = item[2] if len(item) > 2 else ""
                price_per_sqm_str = item[3] if len(item) > 3 else ""
                details = item[4] if len(item) > 4 and item[4] else {}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º cian_id –∏–∑ —Å—Å—ã–ª–∫–∏
                import re
                cian_id_match = re.search(r'/sale/flat/(\d+)/', link)
                cian_id = cian_id_match.group(1) if cian_id_match else f"demo_{hash(link) % 1000000}"
                
                # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                price = None
                if price_str:
                    price_numbers = re.findall(r'[\d\s]+', price_str.replace(' ', ''))
                    if price_numbers:
                        price = int(''.join(price_numbers[0].split()))
                
                # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∑–∞ –º¬≤
                price_per_sqm = None
                if price_per_sqm_str:
                    sqm_numbers = re.findall(r'(\d+)', price_per_sqm_str.replace(' ', ''))
                    if sqm_numbers:
                        price_per_sqm = int(sqm_numbers[0])
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã
                from DB.Models import Apartment
                apartment = Apartment(
                    cian_id=cian_id,
                    url=link,
                    title=name,
                    price=price,
                    price_per_sqm=price_per_sqm,
                    address=details.get('address', ''),
                    is_staging=True,
                    filter_status='pending'
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ –∏–∑ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if 'metro_stations' in details and details['metro_stations']:
                    apartment.metro_data = details['metro_stations']
                
                apartment_objects.append(apartment)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                continue
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(apartment_objects)} –∫–≤–∞—Ä—Ç–∏—Ä")
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ pending –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞
        print("\nüîÑ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Ä–∞–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
        reprocess_stats = await ApartmentService.reprocess_rejected_apartments_for_source(url)
        if reprocess_stats['reprocessed'] > 0:
            print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ pending –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞: {reprocess_stats['reprocessed']} –∫–≤–∞—Ä—Ç–∏—Ä")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ staging –æ–±–ª–∞—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ staging –æ–±–ª–∞—Å—Ç—å...")
        saved_count = 0
        updated_count = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ async session –Ω–∞–ø—Ä—è–º—É—é
        from DB.Models import async_session
        from sqlalchemy import select, and_
        from datetime import datetime
        
        async with async_session() as session:
            for apartment in apartment_objects:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    existing = await session.scalar(
                        select(Apartment).where(
                            and_(
                                Apartment.cian_id == apartment.cian_id,
                                Apartment.is_staging == True
                            )
                        )
                    )
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                        existing.price = apartment.price
                        existing.price_per_sqm = apartment.price_per_sqm
                        existing.title = apartment.title
                        existing.address = apartment.address
                        existing.last_updated = datetime.utcnow()
                        
                        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º source_url
                        existing.source_url = url
                        
                        updated_count += 1
                        current_apartment = existing
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        apartment.first_seen = datetime.utcnow()
                        apartment.last_updated = datetime.utcnow()
                        
                        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º source_url
                        apartment.source_url = url
                        
                        session.add(apartment)
                        saved_count += 1
                        current_apartment = apartment
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    metro_data = getattr(apartment, 'metro_data', None)
                    if metro_data and isinstance(metro_data, list):
                        from DB.Models import MetroStation
                        from sqlalchemy import delete
                        
                        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ –¥–ª—è —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
                        if existing:
                            await session.execute(
                                delete(MetroStation).where(MetroStation.apartment_id == existing.id)
                            )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ
                        for metro_info in metro_data:
                            metro_station = MetroStation(
                                apartment=current_apartment,
                                station_name=metro_info.get('station', ''),
                                travel_time=metro_info.get('time', '')
                            )
                            session.add(metro_station)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment.cian_id}: {e}")
                    continue
            
            await session.commit()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤ staging: {saved_count}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π –ë–î
        staging_stats = await ApartmentService.get_statistics(staging_only=True)
        production_stats = await ApartmentService.get_statistics(staging_only=False)
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   Staging: {staging_stats['total_apartments']} (pending: {staging_stats['pending_apartments']})")
        print(f"   Production: {production_stats['total_apartments']} (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {production_stats['average_price']:,.0f} ‚ÇΩ)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ staging (–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î)
        print(f"\nüè† –ü—Ä–∏–º–µ—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤ staging:")
        try:
            # –ü–æ–ª—É—á–∞–µ–º staging –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            async with async_session() as session:
                result = await session.execute(
                    select(Apartment).where(Apartment.is_staging == True).limit(3)
                )
                sample_apartments = result.scalars().all()
                
                for i, apartment in enumerate(sample_apartments, 1):
                    print(f"\n{i}. {apartment.title}")
                    if apartment.price:
                        print(f"   üí∞ {apartment.price:,} ‚ÇΩ")
                    if apartment.price_per_sqm:
                        print(f"   üìä {apartment.price_per_sqm:,} ‚ÇΩ/–º¬≤")
                    if apartment.address:
                        print(f"   üìç {apartment.address}")
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ –¥–ª—è —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
                    metro_stations = await ApartmentService.get_metro_stations(apartment.id)
                    if metro_stations:
                        metro_info = []
                        for metro in metro_stations[:2]:
                            metro_info.append(f"{metro.station_name} ({metro.travel_time})")
                        print(f"   üöá {', '.join(metro_info)}")
                    print(f"   üîó {apartment.url}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    finally:
        print("\n‚ú® –î–µ–º–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def filtering():
    
    
    print("\n" + "=" * 50)
    print("üîç –î–µ–º–æ —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ staging
        staging_stats = await ApartmentService.get_statistics(staging_only=True)
        
        if staging_stats['pending_apartments'] == 0:
            print("‚ö†Ô∏è  –í staging –Ω–µ—Ç –Ω–µ–æ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        print(f"üìä –í staging –æ–±–ª–∞—Å—Ç–∏ {staging_stats['pending_apartments']} –∫–≤–∞—Ä—Ç–∏—Ä –æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        print(f"\nüìà –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω:")
        market_data = await ApartmentService.calculate_weighted_average_price()
        if market_data['count'] > 0:
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {market_data['average_price']:,} ‚ÇΩ")
            print(f"   –¶–µ–Ω–∞ –∑–∞ –º¬≤: {market_data['average_price_per_sqm']:,} ‚ÇΩ/–º¬≤")
            print(f"   –î–∞–Ω–Ω—ã—Ö: {market_data['count']} –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ {market_data['days_analyzed']} –¥–Ω–µ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å —Ä—ã–Ω–æ—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        print(f"\nüîç –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {DEFAULT_FILTER_CONFIG.min_market_discount_percent}%)")
        filter_service = FilterService(DEFAULT_FILTER_CONFIG)
        results = await filter_service.process_apartments(limit=10)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
        print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: {results['approved']}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {results['rejected']}")
        
        if results['processed'] > 0:
            approval_rate = (results['approved'] / results['processed']) * 100
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_rate:.1f}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        staging_stats_new = await ApartmentService.get_statistics(staging_only=True)
        production_stats_new = await ApartmentService.get_statistics(staging_only=False)
        
        print(f"\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   Staging: {staging_stats_new['pending_apartments']} –æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"   Production: {production_stats_new['total_apartments']} –≥–æ—Ç–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")

async def bargain_hunting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ö–æ—Ç—ã –∑–∞ –≤—ã–≥–æ–¥–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    
    print("\n" + "=" * 50)
    print("üéØ –î–µ–º–æ –æ—Ö–æ—Ç—ã –∑–∞ –≤—ã–≥–æ–¥–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ staging
        staging_stats = await ApartmentService.get_statistics(staging_only=True)
        
        if staging_stats['pending_apartments'] == 0:
            print("‚ö†Ô∏è  –í staging –Ω–µ—Ç –Ω–µ–æ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            return
        
        print(f"üéØ –ü–æ–∏—Å–∫ —Å—É–ø–µ—Ä-—Å–∫–∏–¥–æ–∫ (–º–∏–Ω–∏–º—É–º {BARGAIN_HUNTER_CONFIG.min_market_discount_percent}% —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        bargain_service = FilterService(BARGAIN_HUNTER_CONFIG)
        results = await bargain_service.process_apartments(limit=20)
        
        print(f"\nüèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ö–æ—Ç—ã –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö: {results['approved']}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {results['rejected']}")
        
        if results['approved'] > 0:
            success_rate = (results['approved'] / results['processed']) * 100
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {success_rate:.1f}%")
            print("   üéâ –ù–∞–π–¥–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –±–æ–ª—å—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏!")
        else:
            print("   üòî –°—É–ø–µ—Ä-–≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ö–æ—Ç—ã –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏: {e}")

async def full_cycle(url):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí staging ‚Üí —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Üí production"""
    
    print("=" * 50)
    print("–≠—Ç–∞–ø—ã: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí Staging ‚Üí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Üí Production")
    
    # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ staging
    await parsing(url)
    
    # 2. –û–±—ã—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    await filtering()
    
    # 3. –û—Ö–æ—Ç–∞ –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏
    await bargain_hunting()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        while True:
            for url in CIAN_URLS:
                await full_cycle(url)
                await asyncio.sleep(config.AUTO_PARSER_CYCLE_DELAY)  


    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

