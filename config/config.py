
"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º .env —Ñ–∞–π–ª–∞.
"""

import os
from typing import Optional
from pathlib import Path
from dotenv import load_dotenv

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ Config.py
config_dir = Path(__file__).parent
env_file = config_dir / '.env'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(env_file)


class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # Telegram Bot Configuration
    BOT_TOKEN: str = os.getenv('BOT_TOKEN', '')
    
    # Database Configuration
    DATABASE_URL: str = os.getenv('DATABASE_URL', 'sqlite+aiosqlite:///dp.sqlite')
    
    # Parser Configuration
    PARSER_DELAY: int = int(os.getenv('PARSER_DELAY', '3'))
    PARSER_DEEP_DELAY: int = int(os.getenv('PARSER_DEEP_DELAY', '2'))
    PARSER_DEFAULT_START_PAGE: int = int(os.getenv('PARSER_DEFAULT_START_PAGE', '1'))
    PARSER_DEFAULT_END_PAGE: int = int(os.getenv('PARSER_DEFAULT_END_PAGE', '17'))
    
    # Auto Parser Configuration
    AUTO_PARSER_CYCLE_DELAY: int = int(os.getenv('AUTO_PARSER_CYCLE_DELAY', '1800'))  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
    
    # API Configuration
    REQUEST_TIMEOUT: int = int(os.getenv('REQUEST_TIMEOUT', '30'))
    MAX_RETRIES: int = int(os.getenv('MAX_RETRIES', '3'))
    
    # Bot Notification Settings
    NOTIFICATION_CHECK_INTERVAL: int = int(os.getenv('NOTIFICATION_CHECK_INTERVAL', '30'))
    NOTIFICATION_ERROR_RETRY_INTERVAL: int = int(os.getenv('NOTIFICATION_ERROR_RETRY_INTERVAL', '60'))
    MAX_NOTIFICATIONS_PER_BATCH: int = int(os.getenv('MAX_NOTIFICATIONS_PER_BATCH', '50'))
    
    # Network Retry Configuration
    NETWORK_RETRY_MAX_ATTEMPTS: int = int(os.getenv('NETWORK_RETRY_MAX_ATTEMPTS', '3'))
    NETWORK_RETRY_BASE_DELAY: float = float(os.getenv('NETWORK_RETRY_BASE_DELAY', '1.0'))
    NETWORK_RETRY_MAX_DELAY: float = float(os.getenv('NETWORK_RETRY_MAX_DELAY', '60.0'))
    NETWORK_RETRY_EXPONENTIAL_BACKOFF: bool = os.getenv('NETWORK_RETRY_EXPONENTIAL_BACKOFF', 'true').lower() == 'true'
    
    # Filter Configuration - Default Filter
    DEFAULT_FILTER_MAX_PRICE: int = int(os.getenv('DEFAULT_FILTER_MAX_PRICE', '100000000'))
    DEFAULT_FILTER_MIN_PRICE: int = int(os.getenv('DEFAULT_FILTER_MIN_PRICE', '5000000'))
    DEFAULT_FILTER_MIN_MARKET_DISCOUNT: float = float(os.getenv('DEFAULT_FILTER_MIN_MARKET_DISCOUNT', '10.0'))
    DEFAULT_FILTER_REQUIRED_METRO_DISTANCE: int = int(os.getenv('DEFAULT_FILTER_REQUIRED_METRO_DISTANCE', '10'))
    DEFAULT_FILTER_MIN_TITLE_LENGTH: int = int(os.getenv('DEFAULT_FILTER_MIN_TITLE_LENGTH', '20'))
    
    # Filter Configuration - Premium Filter
    PREMIUM_FILTER_MAX_PRICE: int = int(os.getenv('PREMIUM_FILTER_MAX_PRICE', '80000000'))
    PREMIUM_FILTER_MIN_PRICE: int = int(os.getenv('PREMIUM_FILTER_MIN_PRICE', '20000000'))
    PREMIUM_FILTER_MAX_PRICE_PER_SQM: int = int(os.getenv('PREMIUM_FILTER_MAX_PRICE_PER_SQM', '400000'))
    PREMIUM_FILTER_MIN_MARKET_DISCOUNT: float = float(os.getenv('PREMIUM_FILTER_MIN_MARKET_DISCOUNT', '15.0'))
    PREMIUM_FILTER_REQUIRED_METRO_DISTANCE: int = int(os.getenv('PREMIUM_FILTER_REQUIRED_METRO_DISTANCE', '8'))
    PREMIUM_FILTER_MIN_AREA: float = float(os.getenv('PREMIUM_FILTER_MIN_AREA', '50.0'))
    PREMIUM_FILTER_MIN_FLOOR: int = int(os.getenv('PREMIUM_FILTER_MIN_FLOOR', '2'))
    PREMIUM_FILTER_MAX_FLOOR: int = int(os.getenv('PREMIUM_FILTER_MAX_FLOOR', '20'))
    
    # Filter Configuration - Bargain Hunter
    BARGAIN_FILTER_MAX_PRICE: int = int(os.getenv('BARGAIN_FILTER_MAX_PRICE', '150000000'))
    BARGAIN_FILTER_MIN_PRICE: int = int(os.getenv('BARGAIN_FILTER_MIN_PRICE', '3000000'))
    BARGAIN_FILTER_MIN_MARKET_DISCOUNT: float = float(os.getenv('BARGAIN_FILTER_MIN_MARKET_DISCOUNT', '20.0'))
    BARGAIN_FILTER_REQUIRED_METRO_DISTANCE: int = int(os.getenv('BARGAIN_FILTER_REQUIRED_METRO_DISTANCE', '30'))
    BARGAIN_FILTER_MIN_TITLE_LENGTH: int = int(os.getenv('BARGAIN_FILTER_MIN_TITLE_LENGTH', '15'))
    
    # Filter Configuration - Bootstrap
    BOOTSTRAP_FILTER_MAX_PRICE: int = int(os.getenv('BOOTSTRAP_FILTER_MAX_PRICE', '200000000'))
    BOOTSTRAP_FILTER_MIN_PRICE: int = int(os.getenv('BOOTSTRAP_FILTER_MIN_PRICE', '1000000'))
    BOOTSTRAP_FILTER_MIN_TITLE_LENGTH: int = int(os.getenv('BOOTSTRAP_FILTER_MIN_TITLE_LENGTH', '5'))
    
    @classmethod
    def validate(cls) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        if not cls.BOT_TOKEN:
            raise ValueError(
                "BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN."
            )
    
    @classmethod
    def get_bot_token(cls) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return cls.BOT_TOKEN
    
    @classmethod
    def print_config(cls) -> None:
        """–í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)."""
        print("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   Bot Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if cls.BOT_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   Database URL: {cls.DATABASE_URL}")
        print("")
        print("üï∑Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:")
        print(f"   Parser Delay: {cls.PARSER_DELAY}s")
        print(f"   Deep Parse Delay: {cls.PARSER_DEEP_DELAY}s")
        print(f"   Default Pages: {cls.PARSER_DEFAULT_START_PAGE}-{cls.PARSER_DEFAULT_END_PAGE}")
        print(f"   Auto Parser Cycle Delay: {cls.AUTO_PARSER_CYCLE_DELAY}s ({cls.AUTO_PARSER_CYCLE_DELAY/60:.1f}min)")
        print("")
        print("üîó API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   Request Timeout: {cls.REQUEST_TIMEOUT}s")
        print(f"   Max Retries: {cls.MAX_RETRIES}")
        print(f"   Network Retry Max Delay: {cls.NETWORK_RETRY_MAX_DELAY}s")
        print("")
        print("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print(f"   Check Interval: {cls.NOTIFICATION_CHECK_INTERVAL}s")
        print(f"   Max Notifications per Batch: {cls.MAX_NOTIFICATIONS_PER_BATCH}")
        print("")
        print("üéØ –§–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        print(f"   Min Market Discount: {cls.DEFAULT_FILTER_MIN_MARKET_DISCOUNT}%")
        print(f"   Price Range: {cls.DEFAULT_FILTER_MIN_PRICE:,} - {cls.DEFAULT_FILTER_MAX_PRICE:,} ‚ÇΩ")
        print(f"   Max Metro Distance: {cls.DEFAULT_FILTER_REQUIRED_METRO_DISTANCE} –º–∏–Ω")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot_token = config.get_bot_token