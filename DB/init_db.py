"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from DB.Models import Base, engine
from config import config

async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"   Database URL: {config.DATABASE_URL}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("   - apartments (–æ–±—ä—è–≤–ª–µ–Ω–∏—è: staging + production)")
        print("   - metro_stations (—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ)")
        print("   - price_history (–∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω)")
        print("   - filter_logs (–ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
        print("   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞)")
        print("   - user_notifications (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö)")
        print("   - user_apartment_reads (–æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ)")
        print("   - expenses (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ç–∞–±–ª–∏—Ü–∞)")
        print("\nüí° –¢–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ staging, –∏ production –¥–∞–Ω–Ω—ã–µ")
        print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ is_staging –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
        print("üì± –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)
    finally:
        await engine.dispose()

async def drop_tables():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
    try:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        
        if response.lower() != 'yes':
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)
    finally:
        await engine.dispose()

async def recreate_tables():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–ª—è"""
    try:
        print("üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        print("üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        print("‚úÖ –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("   - apartments (–æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª—è–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)")
        print("   - metro_stations (—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ)")
        print("   - price_history (–∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω)")
        print("   - filter_logs (–ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
        print("   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞)")
        print("   - user_notifications (üì± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)")
        print("   - user_apartment_reads (üëÅÔ∏è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)")
        
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)
    finally:
        await engine.dispose()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        if command == "drop":
            asyncio.run(drop_tables())
        elif command == "recreate":
            asyncio.run(recreate_tables())
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python init_db.py          - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
            print("  python init_db.py drop     - —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
            print("  python init_db.py recreate - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
    else:
        asyncio.run(create_tables())