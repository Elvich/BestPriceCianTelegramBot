"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö.
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from sqlalchemy import select, and_, func
from sqlalchemy.orm import selectinload

from .Models import async_session, Apartment, UserNotification, User, UserApartmentRead
from .apartment_service import ApartmentService

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @staticmethod
    async def create_notifications_for_new_apartments(apartment_count: int) -> int:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
        
        Args:
            apartment_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if apartment_count <= 0:
            return 0

        async with async_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                query = select(User).where(User.is_active == True)
                result = await session.execute(query)
                active_users = result.scalars().all()

                if not active_users:
                    logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    return 0

                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                notifications_created = 0
                
                for user in active_users:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if apartment_count == 1:
                        message = f"üè† –ù–∞–π–¥–µ–Ω–∞ 1 –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞!"
                    elif apartment_count < 5:
                        message = f"üè† –ù–∞–π–¥–µ–Ω–æ {apartment_count} –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞!"
                    else:
                        message = f"üè† –ù–∞–π–¥–µ–Ω–æ {apartment_count} –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞!"
                    
                    message += f"\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"

                    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = UserNotification(
                        telegram_id=user.telegram_id,
                        apartment_count=apartment_count,
                        message=message,
                        is_sent=False,
                        is_read=False
                    )
                    
                    session.add(notification)
                    notifications_created += 1

                await session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ {notifications_created} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {apartment_count} –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
                return notifications_created

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await session.rollback()
                return 0

    @staticmethod
    async def get_pending_notifications(telegram_id: Optional[int] = None, limit: int = 100) -> List[UserNotification]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        async with async_session() as session:
            query = select(UserNotification).where(
                UserNotification.is_sent == False
            ).order_by(UserNotification.created_at)

            if telegram_id:
                query = query.where(UserNotification.telegram_id == telegram_id)

            query = query.limit(limit)
            result = await session.execute(query)
            return result.scalars().all()

    @staticmethod
    async def mark_notification_sent(notification_id: int) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        async with async_session() as session:
            try:
                query = select(UserNotification).where(UserNotification.id == notification_id)
                result = await session.execute(query)
                notification = result.scalar_one_or_none()

                if notification:
                    notification.is_sent = True
                    notification.sent_at = datetime.utcnow()
                    await session.commit()
                    return True

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}")
                await session.rollback()

            return False

    @staticmethod
    async def mark_notifications_read(telegram_id: int) -> int:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        async with async_session() as session:
            try:
                query = select(UserNotification).where(
                    and_(
                        UserNotification.telegram_id == telegram_id,
                        UserNotification.is_read == False
                    )
                )
                result = await session.execute(query)
                notifications = result.scalars().all()

                marked_count = 0
                for notification in notifications:
                    notification.is_read = True
                    notification.read_at = datetime.utcnow()
                    marked_count += 1

                await session.commit()
                logger.info(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ {marked_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                return marked_count

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {e}")
                await session.rollback()
                return 0

    @staticmethod
    async def get_new_apartments_for_user(telegram_id: int, limit: int = 50) -> List[Apartment]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª)
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
        """
        async with async_session() as session:
            # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
            read_apartments_subquery = select(UserApartmentRead.apartment_id).where(
                UserApartmentRead.telegram_id == telegram_id
            )

            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª
            query = select(Apartment).options(
                selectinload(Apartment.metro_stations),
                selectinload(Apartment.price_history)
            ).where(
                and_(
                    Apartment.is_active == True,
                    Apartment.is_staging == False,  # –¢–æ–ª—å–∫–æ production –∫–≤–∞—Ä—Ç–∏—Ä—ã
                    Apartment.is_new == True,       # –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
                    ~Apartment.id.in_(read_apartments_subquery)  # –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                )
            ).order_by(Apartment.approved_at.desc()).limit(limit)

            result = await session.execute(query)
            return result.scalars().all()

    @staticmethod
    async def mark_apartments_as_viewed(telegram_id: int, apartment_ids: List[int]) -> int:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            apartment_ids: –°–ø–∏—Å–æ–∫ ID –∫–≤–∞—Ä—Ç–∏—Ä
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
        """
        if not apartment_ids:
            return 0

        async with async_session() as session:
            try:
                marked_count = 0
                
                for apartment_id in apartment_ids:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è
                    existing_query = select(UserApartmentRead).where(
                        and_(
                            UserApartmentRead.telegram_id == telegram_id,
                            UserApartmentRead.apartment_id == apartment_id
                        )
                    )
                    existing_result = await session.execute(existing_query)
                    existing_read = existing_result.scalar_one_or_none()

                    if not existing_read:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
                        read_record = UserApartmentRead(
                            telegram_id=telegram_id,
                            apartment_id=apartment_id
                        )
                        session.add(read_record)
                        marked_count += 1

                await session.commit()
                logger.info(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ {marked_count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                return marked_count

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: {e}")
                await session.rollback()
                return 0

    @staticmethod
    async def get_notification_stats() -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        async with async_session() as session:
            try:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                total_query = select(func.count(UserNotification.id))
                total_result = await session.execute(total_query)
                total_notifications = total_result.scalar() or 0

                # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                sent_query = select(func.count(UserNotification.id)).where(UserNotification.is_sent == True)
                sent_result = await session.execute(sent_query)
                sent_notifications = sent_result.scalar() or 0

                # –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                read_query = select(func.count(UserNotification.id)).where(UserNotification.is_read == True)
                read_result = await session.execute(read_query)
                read_notifications = read_result.scalar() or 0

                # –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
                new_apartments_query = select(func.count(Apartment.id)).where(
                    and_(
                        Apartment.is_new == True,
                        Apartment.is_staging == False,
                        Apartment.is_active == True
                    )
                )
                new_apartments_result = await session.execute(new_apartments_query)
                new_apartments = new_apartments_result.scalar() or 0

                return {
                    'total_notifications': total_notifications,
                    'sent_notifications': sent_notifications,
                    'read_notifications': read_notifications,
                    'pending_notifications': total_notifications - sent_notifications,
                    'new_apartments': new_apartments
                }

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                return {
                    'total_notifications': 0,
                    'sent_notifications': 0,
                    'read_notifications': 0,
                    'pending_notifications': 0,
                    'new_apartments': 0
                }

    @staticmethod
    async def cleanup_old_notifications(days_old: int = 30) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            days_old: –í–æ–∑—Ä–∞—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–Ω—è—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        async with async_session() as session:
            try:
                cutoff_date = datetime.utcnow() - timedelta(days=days_old)
                
                query = select(UserNotification).where(
                    UserNotification.created_at < cutoff_date
                )
                result = await session.execute(query)
                old_notifications = result.scalars().all()

                deleted_count = 0
                for notification in old_notifications:
                    await session.delete(notification)
                    deleted_count += 1

                await session.commit()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)")
                return deleted_count

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await session.rollback()
                return 0