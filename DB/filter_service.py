"""
–°–µ—Ä–≤–∏—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ staging –ë–î –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î.
"""

import asyncio
from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime

from .apartment_service import ApartmentService
from .models import Apartment


@dataclass
class FilterConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    # –¶–µ–Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    max_price: Optional[int] = None
    min_price: Optional[int] = None
    max_price_per_sqm: Optional[int] = None
    min_price_per_sqm: Optional[int] = None
    
    # –†—ã–Ω–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    min_market_discount_percent: float = 10.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–∫–∞ –≤ %
    enable_market_filter: bool = True  # –≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    allowed_metro_stations: Optional[List[str]] = None
    blocked_metro_stations: Optional[List[str]] = None
    required_metro_distance: Optional[int] = None  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    min_area: Optional[float] = None
    max_area: Optional[float] = None
    allowed_rooms: Optional[List[int]] = None
    min_floor: Optional[int] = None
    max_floor: Optional[int] = None
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    blocked_keywords: Optional[List[str]] = None  # —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–ª—é—á–∞—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    required_keywords: Optional[List[str]] = None  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    
    # –§–∏–ª—å—Ç—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
    check_duplicates: bool = True
    min_title_length: int = 10


class BaseFilter(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    def __init__(self, config: FilterConfig):
        self.config = config
        self.name = self.__class__.__name__
    
    @abstractmethod
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: 'passed' (bool), 'reason' (str)
        """
        pass


class PriceFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ"""
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        if not apartment.price:
            return {'passed': False, 'reason': '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
        
        if self.config.min_price and apartment.price < self.config.min_price:
            return {'passed': False, 'reason': f'–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {apartment.price:,}'}
        
        if self.config.max_price and apartment.price > self.config.max_price:
            return {'passed': False, 'reason': f'–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è: {apartment.price:,}'}
        
        if apartment.price_per_sqm:
            if self.config.min_price_per_sqm and apartment.price_per_sqm < self.config.min_price_per_sqm:
                return {'passed': False, 'reason': f'–¶–µ–Ω–∞ –∑–∞ –º¬≤ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {apartment.price_per_sqm:,}'}
            
            if self.config.max_price_per_sqm and apartment.price_per_sqm > self.config.max_price_per_sqm:
                return {'passed': False, 'reason': f'–¶–µ–Ω–∞ –∑–∞ –º¬≤ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è: {apartment.price_per_sqm:,}'}
        
        return {'passed': True, 'reason': '–¶–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º'}


class MetroFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ"""
    
    def __init__(self, config: FilterConfig):
        super().__init__(config)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        try:
            from config.metro_config import get_blocked_stations, get_preferred_stations, MAX_METRO_DISTANCE_MINUTES
            self.blocked_stations = get_blocked_stations()
            self.preferred_stations = get_preferred_stations()
            self.default_max_distance = MAX_METRO_DISTANCE_MINUTES
        except ImportError:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            self.blocked_stations = config.blocked_metro_stations or []
            self.preferred_stations = []
            self.default_max_distance = 10
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        if not apartment.metro_stations:
            # –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –º–µ—Ç—Ä–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not self.config.required_metro_distance and not self.config.allowed_metro_stations and not self.config.blocked_metro_stations:
                return {'passed': True, 'reason': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}
            return {'passed': False, 'reason': '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ'}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ, –∏—Å–∫–ª—é—á–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        valid_stations = []
        blocked_stations_found = []
        preferred_stations_found = []
        
        for metro in apartment.metro_stations:
            station_name = metro.station_name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ
            is_blocked = False
            for blocked in self.blocked_stations:
                if blocked.lower() in station_name.lower() or station_name.lower() in blocked.lower():
                    is_blocked = True
                    blocked_stations_found.append(station_name)
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
            if not is_blocked:
                valid_stations.append(metro)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π
                for preferred in self.preferred_stations:
                    if preferred.lower() in station_name.lower() or station_name.lower() in preferred.lower():
                        preferred_stations_found.append(station_name)
                        break
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        if not valid_stations:
            if blocked_stations_found:
                return {'passed': False, 'reason': f'–í—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ: {", ".join(blocked_stations_found)}'}
            else:
                return {'passed': False, 'reason': '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
        if self.config.allowed_metro_stations:
            has_allowed = False
            for metro in valid_stations:
                if any(allowed.lower() in metro.station_name.lower() or metro.station_name.lower() in allowed.lower() 
                       for allowed in self.config.allowed_metro_stations):
                    has_allowed = True
                    break
            
            if not has_allowed:
                station_names = [metro.station_name for metro in valid_stations]
                return {'passed': False, 'reason': f'–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö: {", ".join(station_names)}'}
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é —Å—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö
        closest_station = None
        closest_minutes = float('inf')
        
        import re
        for metro in valid_stations:
            if metro.travel_time:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "8 –º–∏–Ω –ø–µ—à–∫–æ–º", "10 –º–∏–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ"
                time_match = re.search(r'(\d+)', metro.travel_time)
                if time_match:
                    minutes = int(time_match.group(1))
                    if minutes < closest_minutes:
                        closest_minutes = minutes
                        closest_station = metro
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
        max_distance = getattr(self.config, 'required_metro_distance', self.default_max_distance)
        
        if closest_station is None:
            return {'passed': False, 'reason': '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ'}
        
        if closest_minutes <= max_distance:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_parts = [f'–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è {closest_station.station_name} –≤ {closest_minutes} –º–∏–Ω']
            
            if preferred_stations_found:
                status_parts.append(f"(‚≠ê –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ: {', '.join(preferred_stations_found)})")
            
            if blocked_stations_found:
                status_parts.append(f"(üö´ –∏—Å–∫–ª—é—á–µ–Ω—ã: {', '.join(blocked_stations_found)})")
            
            return {'passed': True, 'reason': ' '.join(status_parts)}
        else:
            blocked_info = f" (–∏—Å–∫–ª—é—á–µ–Ω—ã: {', '.join(blocked_stations_found)})" if blocked_stations_found else ""
            return {'passed': False, 'reason': f'–ë–ª–∏–∂–∞–π—à–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è {closest_station.station_name} –≤ {closest_minutes} –º–∏–Ω (> {max_distance} –º–∏–Ω){blocked_info}'}


class CharacteristicsFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—â–∞–¥—å
        if apartment.area:
            if self.config.min_area and apartment.area < self.config.min_area:
                return {'passed': False, 'reason': f'–ü–ª–æ—â–∞–¥—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è: {apartment.area} –º¬≤'}
            
            if self.config.max_area and apartment.area > self.config.max_area:
                return {'passed': False, 'reason': f'–ü–ª–æ—â–∞–¥—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {apartment.area} –º¬≤'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        if apartment.rooms and self.config.allowed_rooms:
            if apartment.rooms not in self.config.allowed_rooms:
                return {'passed': False, 'reason': f'–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {apartment.rooms}'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–∂
        if apartment.floor:
            if self.config.min_floor and apartment.floor < self.config.min_floor:
                return {'passed': False, 'reason': f'–≠—Ç–∞–∂ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π: {apartment.floor}'}
            
            if self.config.max_floor and apartment.floor > self.config.max_floor:
                return {'passed': False, 'reason': f'–≠—Ç–∞–∂ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π: {apartment.floor}'}
        
        return {'passed': True, 'reason': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º'}


class QualityFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(apartment.title) < self.config.min_title_length:
            return {'passed': False, 'reason': '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫'}
        
        title_lower = apartment.title.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        if self.config.blocked_keywords:
            for keyword in self.config.blocked_keywords:
                if keyword.lower() in title_lower:
                    return {'passed': False, 'reason': f'–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {keyword}'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        if self.config.required_keywords:
            has_required = any(keyword.lower() in title_lower for keyword in self.config.required_keywords)
            if not has_required:
                return {'passed': False, 'reason': '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤'}
        
        return {'passed': True, 'reason': '–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º'}


class MarketPriceFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º - –Ω–∞—Ö–æ–¥–∏—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞"""
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        if not apartment.price:
            return {'passed': False, 'reason': '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
        market_data = await ApartmentService.get_market_benchmark(apartment)
        
        if not market_data['benchmark'] or not market_data['benchmark']['average_price']:
            return {'passed': True, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä—ã–Ω–∫–æ–º'}
        
        price_deviation = market_data['price_deviation_percent']
        
        if price_deviation is None:
            return {'passed': True, 'reason': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞ –Ω–∞ 10% –∏–ª–∏ –±–æ–ª—å—à–µ
        discount_threshold = getattr(self.config, 'min_market_discount_percent', 10)
        
        if price_deviation <= -discount_threshold:
            benchmark_price = market_data['benchmark']['average_price']
            saving_amount = benchmark_price - apartment.price
            comparison_type = market_data['comparison_type']
            
            return {
                'passed': True,
                'reason': f'–î–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞ –Ω–∞ {abs(price_deviation):.1f}% (—ç–∫–æ–Ω–æ–º–∏—è {saving_amount:,}‚ÇΩ, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {comparison_type})'
            }
        else:
            benchmark_price = market_data['benchmark']['average_price']
            if price_deviation >= 0:
                return {
                    'passed': False,
                    'reason': f'–î–æ—Ä–æ–∂–µ —Ä—ã–Ω–∫–∞ –Ω–∞ {price_deviation:.1f}% (—Ä—ã–Ω–æ–∫: {benchmark_price:,}‚ÇΩ)'
                }
            else:
                return {
                    'passed': False,
                    'reason': f'–°–∫–∏–¥–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞: {abs(price_deviation):.1f}% < {discount_threshold}% (—Ä—ã–Ω–æ–∫: {benchmark_price:,}‚ÇΩ)'
                }


class DuplicateFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    
    async def check(self, apartment: Apartment) -> Dict[str, Any]:
        if not self.config.check_duplicates:
            return {'passed': True, 'reason': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ production –ë–î
        from .models import async_session
        from sqlalchemy import select, and_
        
        async with async_session() as session:
            existing_query = select(Apartment).where(
                and_(Apartment.cian_id == apartment.cian_id, Apartment.is_staging == False)
            )
            existing_result = await session.execute(existing_query)
            existing = existing_result.scalar_one_or_none()
            
            if existing:
                return {'passed': False, 'reason': '–î—É–±–ª–∏–∫–∞—Ç - —É–∂–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î'}
        
        return {'passed': True, 'reason': '–î—É–±–ª–∏–∫–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}


class FilterService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config: FilterConfig):
        self.config = config
        self.filters = [
            DuplicateFilter(config),
            PriceFilter(config),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if config.enable_market_filter:
            self.filters.append(MarketPriceFilter(config))
            
        self.filters.extend([
            MetroFilter(config),
            CharacteristicsFilter(config),
            QualityFilter(config)
        ])
    
    async def process_apartments(self, limit: int = 50) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pending –∫–≤–∞—Ä—Ç–∏—Ä—ã —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'processed': int, 'approved': int, 'rejected': int}
        """
        stats = {'processed': 0, 'approved': 0, 'rejected': 0}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        pending_apartments = await ApartmentService.get_pending_apartments(limit)
        
        for apartment in pending_apartments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                all_passed = True
                rejection_reasons = []
                
                for filter_instance in self.filters:
                    result = await filter_instance.check(apartment)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞
                    await ApartmentService.log_filter_result(
                        apartment.cian_id,
                        filter_instance.name,
                        'pass' if result['passed'] else 'fail',
                        result['reason']
                    )
                    
                    if not result['passed']:
                        all_passed = False
                        rejection_reasons.append(f"{filter_instance.name}: {result['reason']}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if all_passed:
                    # –ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã - –æ–¥–æ–±—Ä—è–µ–º
                    await ApartmentService.mark_apartment_processed(
                        apartment.cian_id, 
                        'approved',
                        '–ü—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã'
                    )
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
                    await ApartmentService.move_to_production(apartment)
                    stats['approved'] += 1
                else:
                    # –û—Ç–∫–ª–æ–Ω—è–µ–º
                    reason = '; '.join(rejection_reasons[:3])  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏—á–∏–Ω—ã
                    await ApartmentService.mark_apartment_processed(
                        apartment.cian_id,
                        'rejected',
                        reason
                    )
                    stats['rejected'] += 1
                
                stats['processed'] += 1
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment.cian_id}: {e}")
                continue
        
        return stats
    



# –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_FILTER_CONFIG = FilterConfig(
    # –†—ã–Ω–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –æ—Å–Ω–æ–≤–∞ —Å–∏—Å—Ç–µ–º—ã
    enable_market_filter=True,
    min_market_discount_percent=10.0,  # –º–∏–Ω–∏–º—É–º 10% —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É
    
    # –¶–µ–Ω–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    max_price=100_000_000,  # –¥–æ 100 –º–ª–Ω (—à–∏—Ä–æ–∫–∏–µ —Ä–∞–º–∫–∏)
    min_price=5_000_000,    # –æ—Ç 5 –º–ª–Ω
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    required_metro_distance=10,  # –¥–æ 10 –º–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ (–±–ª–∏–∂–∞–π—à–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è)
    # –°—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config/metro_config.py
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    min_title_length=20,
    blocked_keywords=['–∫–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è', '–¥–æ–ª—è', '—Ö–æ—Å—Ç–µ–ª', '–æ–±—â–µ–∂–∏—Ç–∏–µ'],
    check_duplicates=True
)

PREMIUM_FILTER_CONFIG = FilterConfig(
    # –†—ã–Ω–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ
    enable_market_filter=True,
    min_market_discount_percent=15.0,  # –º–∏–Ω–∏–º—É–º 15% —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É
    
    # –¶–µ–Ω–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    max_price=80_000_000,   # –¥–æ 80 –º–ª–Ω
    min_price=20_000_000,   # –æ—Ç 20 –º–ª–Ω
    max_price_per_sqm=400_000,  # –¥–æ 400–∫ –∑–∞ –º¬≤
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    required_metro_distance=8,  # –¥–æ 8 –º–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ (–ø—Ä–µ–º–∏—É–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
    # –°—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config/metro_config.py
    # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    allowed_metro_stations=[
        '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è', '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è', '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏', 
        '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å', '–°–æ–∫–æ–ª', '–í–æ–π–∫–æ–≤—Å–∫–∞—è'
    ],
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
    min_area=50.0,  # –æ—Ç 50 –º¬≤
    allowed_rooms=[2, 3, 4],  # 2-4 –∫–æ–º–Ω–∞—Ç—ã
    min_floor=2,  # –Ω–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂
    max_floor=20, # –Ω–µ –≤—ã—à–µ 20 —ç—Ç–∞–∂–∞
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    blocked_keywords=['—Å—Ç—É–¥–∏—è', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è', '–¥–æ–ª—è', '–∫–æ–º–Ω–∞—Ç–∞', '—Ö—Ä—É—â–µ–≤–∫–∞', '—Ö–æ—Å—Ç–µ–ª'],
    check_duplicates=True
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
BARGAIN_HUNTER_CONFIG = FilterConfig(
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å - —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã
    enable_market_filter=True,
    min_market_discount_percent=20.0,  # –º–∏–Ω–∏–º—É–º 20% —Å–∫–∏–¥–∫–∞ –∫ —Ä—ã–Ω–∫—É!
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
    max_price=150_000_000,  # —à–∏—Ä–æ–∫–∏–µ —Ä–∞–º–∫–∏
    min_price=3_000_000,
    required_metro_distance=30,  # –º–æ–∂–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —É–¥–æ–±—Å—Ç–≤–æ–º —Ä–∞–¥–∏ —Ü–µ–Ω—ã
    
    # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    min_title_length=15,
    blocked_keywords=['–¥–æ–ª—è', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è'],
    check_duplicates=True
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î (–±–µ–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞)
BOOTSTRAP_CONFIG = FilterConfig(
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    enable_market_filter=False,
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –æ—á–µ–Ω—å –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ
    max_price=200_000_000,  # –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–µ —Ä–∞–º–∫–∏
    min_price=1_000_000,
    
    # –ù–ï —Ç—Ä–µ–±—É–µ–º –º–µ—Ç—Ä–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    required_metro_distance=None,  # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –º–µ—Ç—Ä–æ
    # –í bootstrap —Ä–µ–∂–∏–º–µ –±–∞–Ω-–ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—Å–º. MetroFilter –ª–æ–≥–∏–∫—É)
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    min_title_length=5,  # –æ—á–µ–Ω—å –ª–∏–±–µ—Ä–∞–ª—å–Ω–æ
    blocked_keywords=['–¥–æ–ª—è', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è'],  # –º–∏–Ω–∏–º—É–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    check_duplicates=True
)