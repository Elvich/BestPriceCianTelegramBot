import os
import csv
import asyncio
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from DB.apartment_service import ApartmentService

class Saver:
    def __init__(self, filename='apartments.csv', save_to_db=True, save_to_csv=False, use_staging=True):
        self.filename = filename
        self.save_to_db = save_to_db
        self.save_to_csv = save_to_csv
        self.use_staging = use_staging

    def save(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏/–∏–ª–∏ CSV —Ñ–∞–π–ª"""
        print(f"\n–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        if self.save_to_db:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                service_name = "staging –ë–î" if self.use_staging else "–æ—Å–Ω–æ–≤–Ω—É—é –ë–î"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–∂–µ event loop
                loop = None
                try:
                    loop = asyncio.get_running_loop()
                except RuntimeError:
                    pass
                
                if loop is not None:
                    # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    import concurrent.futures
                    import threading
                    
                    def run_in_thread():
                        new_loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(new_loop)
                        try:
                            if self.use_staging:
                                return new_loop.run_until_complete(ApartmentService.save_to_staging(data))
                            else:
                                return new_loop.run_until_complete(ApartmentService.save_apartments(data))
                        finally:
                            new_loop.close()
                    
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(run_in_thread)
                        stats = future.result(timeout=60)  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                else:
                    # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±
                    if self.use_staging:
                        stats = asyncio.run(ApartmentService.save_to_staging(data))
                    else:
                        stats = asyncio.run(ApartmentService.save_apartments(data))
                
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {service_name}:")
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {stats['created']}")
                print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
                if stats['errors'] > 0:
                    print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ë–î
                def get_stats_in_thread():
                    new_loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(new_loop)
                    try:
                        return new_loop.run_until_complete(ApartmentService.get_statistics(staging_only=self.use_staging))
                    finally:
                        new_loop.close()
                
                if loop is not None:
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(get_stats_in_thread)
                        db_stats = future.result(timeout=30)
                else:
                    db_stats = asyncio.run(ApartmentService.get_statistics(staging_only=self.use_staging))
                
                if self.use_staging:
                    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ staging –ë–î:")
                    print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {db_stats['total_apartments']}")
                    print(f"   –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {db_stats['pending_apartments']}")
                    print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: {db_stats['approved_apartments']}")
                    print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {db_stats['rejected_apartments']}")
                else:
                    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î:")
                    print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {db_stats['total_apartments']}")
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {db_stats['active_apartments']}")
                    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {db_stats['average_price']:,} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
                print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
                self.save_to_csv = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–ª–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)
        if self.save_to_csv:
            self._save_to_csv(data)
    
    def _save_to_csv(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        self.clear_file()

        absolute_path = os.path.abspath(self.filename)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Ñ–∞–π–ª: {absolute_path}")

        with open(self.filename, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            
            writer.writerow(['–°—Å—ã–ª–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–¶–µ–Ω–∞ –∑–∞ –º¬≤', '–î–µ—Ç–∞–ª–∏'])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for kv in data:
                writer.writerow(kv)

    def clear_file(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if os.path.exists(self.filename):
            os.remove(self.filename)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {self.filename}")

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class CSVSaver(Saver):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ CSV (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)"""
    def __init__(self, filename='apartments.csv'):
        super().__init__(filename, save_to_db=False, save_to_csv=True, use_staging=False)

class ProductionSaver(Saver):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î (–±–µ–∑ staging)"""
    def __init__(self, filename='apartments.csv'):
        super().__init__(filename, save_to_db=True, save_to_csv=False, use_staging=False)